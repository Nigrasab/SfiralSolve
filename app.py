import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
import io

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
st.set_page_config(page_title="–°—Ñ–∏—Ä–∞–ª—å–Ω–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", layout="centered")
st.title("\U0001F9E0 –°—Ñ–∏—Ä–∞–ª—å–Ω–∞—è –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON
uploaded_file = st.file_uploader("\U0001F4C2 –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π", type="json")

if uploaded_file:
    try:
        df = pd.read_json(uploaded_file)

        if len(df) > 50000:
            st.warning("\u26A0\ufe0f –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–¥–µ–ª–∏—Ç–µ –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        else:
            df_counts = df["statevector"].value_counts().reset_index()
            df_counts.columns = ["C–æ—Å—Ç–æ—è–Ω–∏–µ", "–ß–∞—Å—Ç–æ—Ç–∞"]

            # –§–∏–ª—å—Ç—Ä –ø–æ —à–∞–±–ª–æ–Ω—É
            pattern_input = st.text_input("\U0001F50D –§–∏–ª—å—Ç—Ä –ø–æ –±–∏—Ç–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É (* –¥–ª—è –ª—é–±—ã—Ö):", value="")
            if pattern_input:
                try:
                    regex = re.compile("^" + pattern_input.replace("*", ".") + "$")
                    df_counts = df_counts[df_counts["C–æ—Å—Ç–æ—è–Ω–∏–µ"].apply(lambda x: bool(regex.match(x)))]
                except re.error:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–±–ª–æ–Ω")

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sort_order = st.radio("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ:", ["–ü–æ —É–±—ã–≤–∞–Ω–∏—é", "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"], horizontal=True)
            ascending = sort_order == "–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"
            df_counts = df_counts.sort_values(by="–ß–∞—Å—Ç–æ—Ç–∞", ascending=ascending)

            df_top = df_counts.head(10)

            # –ì—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(10, 4))
            sns.barplot(x="C–æ—Å—Ç–æ—è–Ω–∏–µ", y="–ß–∞—Å—Ç–æ—Ç–∞", data=df_top, palette="Blues_r", ax=ax)
            ax.set_title("\u0427–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–ø-10 —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            ax.set_xlabel("C–æ—Å—Ç–æ—è–Ω–∏–µ")
            ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
            plt.xticks(rotation=45)
            st.pyplot(fig)

            # –¢–∞–±–ª–∏—Ü–∞
            st.dataframe(df_top, use_container_width=True)

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
            csv_buffer = io.BytesIO()
            df_top.to_csv(csv_buffer, index=False)
            st.download_button(
                label="üìÇ –°–∫–∞—á–∞—Ç—å CSV",
                data=csv_buffer.getvalue(),
                file_name="—Ç–æ–ø_—Å–æ—Å—Ç–æ—è–Ω–∏–π.csv",
                mime="text/csv"
            )

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PNG
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png')
            img_buffer.seek(0)
            st.download_button(
                label="üóÇÔ∏è –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ PNG",
                data=img_buffer,
                file_name="–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞_—Å–æ—Å—Ç–æ—è–Ω–∏–π.png",
                mime="image/png"
            )

            st.success("\u0414–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
